{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.delveon",
    "name": "Delve",
    "patterns": [
        {
            "include": "#strings"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#single-line-comment-consuming-line-ending"
        },
        {
          "include": "#deprecated-temporary"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#symbols"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#otherkeywords"
        },
        {
          "include": "#types"
        },
        {
          "include": "#constants"
        }
    ],
    "repository": {
        "strings": {
            "name": "string.quoted.double.delve",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.delve",
                    "match": "\\\\."
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.documentation.delve",
                    "begin": "/\\*\\*(?!/)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.delve"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.delve"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#docblock"
                        }
                    ]
                },
                {
                    "name": "comment.block.delve",
                    "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.delve"
                        },
                        "2": {
                            "name": "storage.type.internaldeclaration.delve"
                        },
                        "3": {
                            "name": "punctuation.decorator.internaldeclaration.delve"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.delve"
                        }
                    }
                },
                {
                    "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.delve"
                        },
                        "2": {
                            "name": "comment.line.double-slash.delve"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.delve"
                        },
                        "4": {
                            "name": "storage.type.internaldeclaration.delve"
                        },
                        "5": {
                            "name": "punctuation.decorator.internaldeclaration.delve"
                        }
                    },
                    "end": "(?=$)",
                    "contentName": "comment.line.double-slash.delve"
                }
            ]
        },
        "single-line-comment-consuming-line-ending": {
            "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.comment.leading.delve"
                },
                "2": {
                    "name": "comment.line.double-slash.delve"
                },
                "3": {
                    "name": "punctuation.definition.comment.delve"
                },
                "4": {
                    "name": "storage.type.internaldeclaration.delve"
                },
                "5": {
                    "name": "punctuation.decorator.internaldeclaration.delve"
                }
            },
            "end": "(?=^)",
            "contentName": "comment.line.double-slash.delve"
        },
        "deprecated-temporary": {
          "patterns": [
            {
              "name": "keyword.other.delve",
              "match": "@inspect"
            }
          ]
        },
        "operators": {
          "patterns": [
            {
              "name": "keyword.other.delve",
              "match": "(\\b(if|then|else|end|and|or|not|eq|neq|lt|lt_eq|gt|gt_eq)\\b)|(\\+|\\-|\\*|\\/|÷|\\^|\\%|\\=|\\!\\=|≠|\\<|\\<\\=|≤|\\>|\\>\\=|≥|\\&)"
            }
          ]
        },
        "symbols": {
          "patterns": [
            {
                "name": "variable.parameter.delve",
                "match": "(:[\\[_$[:alpha:]](\\]|[_$[:alnum:]]*))"
            }
          ]
        },
        "keywords": {
          "patterns": [
            {
              "name": "keyword.control.delve",
              "match": "(\\b(def|entity|bound|include|ic|forall|exists|∀|∃|return)\\b)|(((\\<)?\\|(\\>)?)|∀|∃)"
            }
          ]
        },
        "otherkeywords": {
          "patterns": [
            {
              "name": "keyword.other.delve",
              "match": "\\s*(@inline)\\s*|\\s*(function)\\s|(\\b(implies|select|from|∈|where|for|in)\\b)|(((\\<)?\\|(\\>)?)|∈)"
            }
          ]
        },
        "types": {
          "patterns": [
            {
              "name": "entity.name.type.delve",
              "match": "(\\b(Symbol|Char|Bool|Rational|FixedDecimal|Float16|Float32|Float64|Int8|Int16|Int32|Int64|Int128|UInt8|UInt16|UInt32|UInt64|UInt128|Date|DateTime|Day|Week|Month|Year|Nanosecond|Microsecond|Millisecond|Second|Minute|Hour|FilePos|HashValue|AutoNumberValue)\\b)"
            }
          ]
        },
        "constants": {
          "patterns": [
            {
              "name": "constant.language.delve",
              "match": "(\\b(true|false)\\b)"
            }
          ]
        }
    },
    "scopeName": "source.delve"
}
